{{{#!diff
46c46
< function [Wp,b,fval_vec,itr_counter] = accel_grad_mc(Xtrain,Ytrain,lambda,opt)

---
> function [Wp,b,fval_vec,time_vec,itr_counter,res] = accel_grad_mmc(Xtrain,Ytrain,lambda,opt)

67c67,78
<     W_init = zeros(size(Xtrain,2),size(Xtrain,1));

---
>   if isfield(opt,'blks')

>     if ~isequal(size(Xtrain,2)*size(Xtrain,3),sum(prod(opt.blks, ...

>                                                        2)))

>       error('size of Xtrain does not match opt.blks');

>     end

>     W_init = cell(1,size(opt.blks,1));

>     for jj=1:length(W_init)

>       W_init{jj}=zeros(opt.blks(jj,:));

>     end

>   else

>     W_init = {zeros(size(Xtrain,2),size(Xtrain,3))};

>   end

93c104,108
<     

---
> 

> if ndims(Xtrain)>2

>   Xtrain=Xtrain(:,:);

> end

> 

94a110,111
> time_vec = zeros(1,max_itr);

> time0 = cputime;

109c126
<     [Wp,b1,P,sval] = ComputeQP(Xtrain,Ytrain,Z_old,c_init,L,lambda);

---
>     [Wp,b1,P,sval,delta_W,delta_loss] = ComputeQP(Xtrain,Ytrain,Z_old,c_init,L,lambda);

118c135
<         [Wp,b1,P,sval] = ComputeQP(Xtrain,Ytrain,Z_old,c_init,L,lambda);

---
>         [Wp,b1,P,sval,delta_W,delta_loss] = ComputeQP(Xtrain,Ytrain,Z_old,c_init,L,lambda);

124a142,144
>     time_vec(itr_counter) = cputime-time0;

> 

>     res(itr_counter) = 1 - ComputeDual(delta_loss, Xtrain, Ytrain, lambda, opt.blks)/fval;

128c148,150
<     Z_old = Wp+((alpha_old-1)/alpha)*(Wp-W_old);

---
>     for jj=1:length(Wp)

>       Z_old{jj} = Wp{jj}+((alpha_old-1)/alpha)*(Wp{jj}-W_old{jj});

>     end

134c156,161
<         fprintf('Iteration = %8d,  objective = %f\n',itr_counter, fval);

---
>         fprintf('Iteration = %8d,  objective = %f gap = %g\n',itr_counter, ...

>                 fval, res(itr_counter));

>     end

>     

>     if res(itr_counter)<1e-3

>       break;

140c167
< function [Wp,b1,P,sval] = ComputeQP(X,Y,W,b,L,lambda)

---
> function [Wp,b1,P,sval,delta_W,delta_loss] = ComputeQP(X,Y,W,b,L,lambda)

142c169
< [W1,b1,delta_W,delta_b,f] = ComputeGradStep(X,Y,W,L,b);

---
> [W1,b1,delta_W,delta_b,f,delta_loss] = ComputeGradStep(X,Y,W,L,b);

144c171,174
< [U,D,V] = svd(W1,0);

---
> sval=0;

> Wp=cell(size(W));

> for jj=1:length(W)

>   [U,D,V] = svd(W1{jj},0);

146c176
< %[U,D] = eig(W1);

---
>   %[U,D] = eig(W1);

148,151c178,181
< D = diag(D);

< D = D-(lambda/L);

< idx = find(D>0);

< sval = sum(D(idx));

---
>   D = diag(D);

>   D = D-(lambda/L);

>   idx = find(D>0);

>   sval =sval+sum(D(idx));

153c183,184
< Wp = U(:,idx)*diag(D(idx))*V(:,idx)';

---
>   Wp{jj} = U(:,idx)*diag(D(idx))*V(:,idx)';

> end

160c191,199
< P = f+ComputeProdTrace(delta_W,(Wp-W))+delta_b*(b1-b)+0.5*L*(norm(Wp-W,'fro')^2+(b1-b)^2);

---
> 

> P = f+delta_b*(b1-b)+(b1-b)^2;

> 

> for jj=1:length(W)

>   %  ComputeProdTrace(delta_W,(Wp-W))+0.5*L*(norm(Wp-W,'fro')^2

>   Wpdiff = Wp{jj}-W{jj};

>   P = P + delta_W{jj}(:)'*Wpdiff(:)+0.5*L*sum(Wpdiff(:).^2);

> end

> 

164c203
< function [W1,b1,delta_W,delta_b,f] = ComputeGradStep(X,Y,W,L,b)

---
> function [W1,b1,delta_W,delta_b,f,delta_loss] = ComputeGradStep(X,Y,W,L,b)

166,167c205,209
< [delta_W,delta_b,f] = ComputeDerivative(X,Y,W,b);

< W1 = W-(1/L)*delta_W;

---
> [delta_W,delta_b,f,delta_loss] = ComputeDerivative(X,Y,W,b);

> W1=cell(size(W));

> for jj=1:length(W)

>   W1{jj} = W{jj}-(1/L)*delta_W{jj};

> end

171c213
< function [dev,delta_b,f] = ComputeDerivative(X,Y,W,b)

---
> function Wvec = Vectorize(W,n)

173,174c215,227
< num_samples = size(X,3);

< tmp = zeros(num_samples,1);

---
> Wvec=zeros(n,1);

> ix0=0;

> for jj=1:length(W)

>   I=ix0+(1:prod(size(W{jj})));

>   ix0=I(end);

>   Wvec(I)=W{jj}(:);

> end

> 

> 

> function [dev,delta_b,f,delta_loss] = ComputeDerivative(X,Y,W,b)

> 

> Wvec=Vectorize(W,size(X,2));

> tmp = exp(-Y.*(X*Wvec+b)');

176,190c229,241
< %disp('Compute derivative');

< for i = 1:num_samples

<     %tmp(i) = exp(-Y(i)*(trace(W'*X(:,:,i))+b));

<     tmp(i) = exp(-Y(i)*(ComputeProdTrace(W,X(:,:,i))+b));

< end

< 

< dev = zeros(size(W,1),size(W,2));

< delta_b = 0;

< f = 0;

< 

< for i = 1:num_samples

<     tt = 1+tmp(i);

<     f = f+log(tt);

<     dev = dev-(Y(i)*X(:,:,i)*tmp(i))/tt;

<     delta_b = delta_b-Y(i)*tmp(i)/tt;

---
> delta_loss = -Y.*tmp./(1+tmp);

> 

> dev = cell(size(W));

> 

> f      = sum(log(1+tmp));

> delta_b= sum(delta_loss);

> 

> ix0=0;

> for jj=1:length(dev)

>   I=ix0+(1:prod(size(W{jj})));

>   ix0=I(end);

>   dev{jj} = zeros(size(W{jj}));

>   dev{jj}(:) = delta_loss*X(:,I);

191a243,244
> 

> 

196,203c249,251
< %disp('Compute function value');

< num_samples = size(X,3);

< f = 0;

< for i = 1:num_samples

<     %f = f+log(1+exp(-Y(i)*(trace(W'*X(:,:,i))+b)));

<     f = f+log(1+exp(-Y(i)*(ComputeProdTrace(W,X(:,:,i))+b)));

<     

< end

---
> Wvec=Vectorize(W,size(X,2));

> f=sum(log(1+exp(-Y'.*(X*Wvec+b))));

> 

206c254,263
< function tval = ComputeProdTrace(A,B)

---
> function dval = ComputeDual(gg, X, Y, lambda, blks)

> aa=-gg';

> aa=aa-mean(aa);

> 

> dnm = ds_dnorm(X'*aa,blks);

> 

> aa  = min(1, lambda/dnm)*aa;

> 

> dval = -loss_lrd(aa, Y');

> 

208,216d264
< %disp('Compute trace');

< %tval = 0;

< %for i = 1:size(A,2)

< %    tval = tval+A(:,i)'*B(:,i);

< %end

< 

< a = reshape(A, [size(A,1)*size(A,2),1]);

< b = reshape(B, [size(B,1)*size(B,2),1]);

< tval = a'*b;


}}}
